#include <stdio.h>
void divide(int arr[], int start, int end, int *count);
int main() {
int arr[] = {1, 2, 3, 4, 5, 6, 7, 8};
int n = sizeof(arr) / sizeof(arr[0]);
int count = 0;
divide(arr, 0, n-1, &count);
printf("Number of iterations: %d\n"
, count);
return 0;
}
void divide(int arr[], int start, int end, int *count) {if (start == end) {
return;
}
Digital assignment 2
Name: D.Kanishk
Reg.no: 22BRS1029
First question:
Write a C program to divide the integer array into two halvesusing function recursion. Call the user-defined “divide”function recursively, with the left half of the split array beingpassed as an argument for that function. Let the recursivefunction to get executed until the array size becomes one.
Count the number of iterations to reach the base condition.
Explain the working procedure of recursive function withstack structure.
Answer:
int mid = (start + end) / 2;
divide(arr, start, mid, count);
(*count)++;
divide(arr, mid+1, end, count);
